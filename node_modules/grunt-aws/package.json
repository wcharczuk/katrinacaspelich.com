{
  "name": "grunt-aws",
  "description": "A Grunt interface into the Amazon Node.JS SDK",
  "version": "0.3.0",
  "homepage": "https://github.com/jpillora/grunt-aws",
  "author": {
    "name": "Jaime Pillora",
    "email": "dev@jpillora.com",
    "url": "http://jpillora.com"
  },
  "maintainers": [
    {
      "name": "jpillora",
      "email": "jpillora@gmail.com"
    },
    {
      "name": "bxjx",
      "email": "b.j.rossiter@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/jpillora/grunt-aws"
  },
  "bugs": {
    "url": "https://github.com/jpillora/grunt-aws/issues"
  },
  "licenses": "MIT",
  "main": "Gruntfile.js",
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "keywords": [
    "gruntplugin",
    "deploy",
    "amazon",
    "aws",
    "s3",
    "cache",
    "caching",
    "gzip",
    "compress"
  ],
  "dependencies": {
    "mime": "~1.2.11",
    "async": "~0.2.9",
    "lodash": "~1.3.1",
    "aws-sdk": "~1.12.0"
  },
  "readme": "# grunt-aws\n\nA Grunt interface into the Amazon Web Services Node.JS SDK `aws-sdk`\n\n## Getting Started\nThis plugin requires Grunt `0.4.x`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```sh\nnpm install --save-dev grunt-aws\n```\n\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-aws');\n```\n\n-----\n\n*Note:*\n\nThis plugin aims to provide a task for each service on AWS.\nCurrently however, only the Simple Storage Service `\"s3\"` task has been implemented.\n\n## The \"s3\" task\n\n\n### Features\n\n* Fast\n* Simple\n* Auto Gzip\n* Smart Local Caching\n\n### Usage\n\nTo upload all files *inside* `build/` into `my-awesome-bucket`:\n\n```js\n  grunt.initConfig({\n    aws: grunt.file.readJSON(\"credentials.json\"),\n    s3: {\n      options: {\n        accessKeyId: \"<%= aws.accessKeyId %>\",\n        secretAccessKey: \"<%= aws.secretAccessKey %>\",\n        bucket: \"my-awesome-bucket\"\n      },\n      build: {\n        cwd: \"build/\",\n        src: \"**\"\n      }\n    }\n  });\n```\n\nSee the complete example [here](https://github.com/jpillora/grunt-aws/tree/master/example)\n\n### Options\n\n#### `accessKeyId` *required* (String) \n\nAmazon access key id\n\n#### `secretAccessKey` *required* (String) \n\nAmazon secret access key\n\n#### `bucket` *required* (String)\n\nBucket name\n\n#### `region` (String)\n\nDefault *US Standard*\n\nFor all possible values, see [Location constraints](http://docs.aws.amazon.com/general/latest/gr/rande.html#s3_region).\n\n#### `sslEnabled` (Boolean)\n\nDefault `true`\n\nSSL is enabled or not\n\n#### `maxRetries` (Number)\n\nDefault `3`\n\nNumber of retries for a request\n\n#### `access` (String)\n\nDefault `\"public-read\"`\n\nFile permissions, must be one of:\n\n* `\"private\"`\n* `\"public-read\"`\n* `\"public-read-write\"`\n* `\"authenticated-read\"`\n* `\"bucket-owner-read\"`\n* `\"bucket-owner-full-control\"`\n\n#### `gzip` (Boolean)\n\nDefault `true`\n\nGzips the file before uploading and sets the appropriate headers\n\n **Note: The default is `true` because this task assumes you're uploading content to be consumed by [browsers developed after 1999](http://schroepl.net/projekte/mod_gzip/browser.htm). On the terminal, you can retrieve a file using `curl --compressed <url>`.**\n\n#### `dryRun` (Boolean)\n\nDefault `false`\n\nPerforms a preview run displaying what would be modified\n\n#### `concurrency` (Number)\n\nDefault `20`\n\nNumber of S3 operations that may be performed concurrently \n\n#### `cache` (Boolean)\n\nDefault `true`\n\nDon't upload files that already exist (same ETag). Each target has it's\nown options cache, so if you change the options object, files\nwill be forced to reupload.\n\n#### `cacheTTL` (Number)\n\nDefault `60*60*1000` (1hr)\n\nNumber of milliseconds to wait before retrieving the\nobject list from S3. If you only modify this bucket\nfrom `grunt-aws` on one machine then it can be `Infinity`\nif you like. To disable cache, set it to `0`. \n\n#### `headers` (Object)\n\nSet HTTP headers, please see the [putObject docs](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putObject-property)\n\nThe following are allowed:\n\n* `ContentLength`\n* `ContentType` (will override mime type lookups)\n* `ContentDisposition`\n* `ContentEncoding`\n* `CacheControl` (converts numbers into strings as `max-age=<num>, public`)\n* `Expires` (converts dates to strings with `toUTCString()`)\n* `GrantFullControl`\n* `GrantRead`\n* `GrantReadACP`\n* `GrantWriteACP`\n* `ServerSideEncryption` (`\"AES256\"`)\n* `StorageClass` (`\"STANDARD\"` or `\"REDUCED_REDUNDANCY\"`) \n* `WebsiteRedirectLocation`\n\nThe properties not listed are still available as:\n\n* `ACL` - `access` option above\n* `Body` - the file to be uploaded\n* `Key` - the calculated file path\n* `Bucket` - `bucket` option above\n* `Metadata` - `meta` option below\n\n#### `meta` (Object)\n\nSet **custom** HTTP headers\n\nAll custom headers will be prefixed with `x-amz-meta-`.\nFor example `{Foo:\"42\"}` becomes `x-amz-meta-foo:42`.\n\n#### `mime` (Object)\n\nDefine your own mime types\n\nThis object will be passed into [`mime.define()`](https://github.com/broofa/node-mime#mimedefine)\n\n#### `mimeDefault` (String)\n\nDefault `\"application/octet-stream\"`\n\nThe default mime type for when [`mime.lookup()`](https://github.com/broofa/node-mime#mimelookuppath) fails\n\n#### `createBucket` (Boolean)\n\nDefault `false`\n\nCreate the bucket if it does not exist. Use the `bucket` option to name the bucket. Use the `access` and `region` as parameters when creating the bucket.\n\n#### `enableWeb` (object)\n\nDefault `false`\n\nConfigure static web hosting for the bucket. Set to `true` to enable the default hosting with the `IndexDocument` set to `index.html`. Otherwise, set the value to be an object that matches the parameters required for `WebsiteConfiguration` in [putBucketWebsite docs](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#putBucketWebsite-property).\n\n\n---\n\n### Caching\n\nFirst run will deploy like:\n\n```\nRunning \"s3:uat\" (s3) task\nRetrieving list of existing objects...\n>> Put 'public/vendor/jquery.rest.js'\n>> Put 'index.html'\n>> Put 'scripts/app.js'\n>> Put 'styles/app.css'\n>> Put 'public/img/loader.gif'\n>> Put 'public/vendor/verify.notify.js'\n>> Put 6 files\n```\n\nSubsequent runs should look like:\n\n```\nRunning \"s3:uat\" (s3) task\n>> No change 'index.html'\n>> No change 'public/vendor/jquery.rest.js'\n>> No change 'styles/app.css'\n>> No change 'scripts/app.js'\n>> No change 'public/img/loader.gif'\n>> No change 'public/vendor/verify.notify.js'\n>> Put 0 files\n```\n\n---\n\n### Explained Examples\n\n``` js\ns3: {\n  //provide your options...\n\n  options: {\n    accessKeyId: \"<%= aws.accessKeyId %>\",\n    secretAccessKey: \"<%= aws.secretAccessKey %>\",\n    bucket: \"my-bucket\"\n  },\n\n  //then create some targets...\n\n  //upload all files within build/ to root\n  build: {\n    cwd: \"build/\",\n    src: \"**\"\n  },\n\n  //upload all files within build/ to output/\n  move: {\n    cwd: \"build/\",\n    src: \"**\",\n    dest: \"output/\"\n  },\n\n  //upload and rename an individual file\n  specificFile: {\n    src: \"build/a.txt\",\n    dest: \"output/b.txt\"\n  },\n\n  //upload and rename many individual files\n  specificFiles: {\n    files: [{\n      src: \"build/a.txt\",\n      dest: \"output/b.txt\"\n    },{\n      src: \"build/c.txt\",\n      dest: \"output/d.txt\"\n    }]\n  },\n\n  //upload and rename many individual files (shorter syntax)\n  specificFilesShort: {\n    \"output/b.txt\": \"build/a.txt\"\n    \"output/d.txt\": \"build/c.txt\"\n  },\n\n  //upload the img/ folder and all it's files\n  images: {\n    src: \"img/**\"\n  },\n\n  //upload the docs/ folder and it's pdf and txt files\n  documents: {\n    src: \"docs/**/*.{pdf,txt}\"\n  },\n\n  //upload the secrets/ folder and all its files to a different bucket\n  secrets: {\n    //override options\n    options: {\n    \tbucket: \"my-secret-bucket\"\n    }\n    src: \"secrets/**\"\n  },\n\n  //upload the public/ folder with a 2 year cache time\n  longTym: {\n    options: {\n      headers: {\n        CacheControl: 630720000 //max-age=630720000, public\n      }\n    }\n    src: \"public/**\"\n  },\n  //upload the public/ folder with a specific expiry date\n  beryLongTym: {\n    options: {\n      headers: {\n        Expires: new Date('2050') //Sat, 01 Jan 2050 00:00:00 GMT\n      }\n    }\n    src: \"public/**\"\n  }\n}\n```\n\n### References\n\n* [S3 AWS SDK API Docs](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html)\n\n### Todo\n\n* Download operation\n* Delete unmatched files\n\n#### MIT License\n\nCopyright &copy; 2013 Jaime Pillora &lt;dev@jpillora.com&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\n\n\n",
  "readmeFilename": "README.md",
  "_id": "grunt-aws@0.3.0",
  "dist": {
    "shasum": "65b8be9b2b5a833ac3e036d8ef79ec620c15f65c",
    "tarball": "http://registry.npmjs.org/grunt-aws/-/grunt-aws-0.3.0.tgz"
  },
  "_from": "grunt-aws@>=0.3.0-0 <0.4.0-0",
  "_npmVersion": "1.3.14",
  "_npmUser": {
    "name": "jpillora",
    "email": "dev@jpillora.com"
  },
  "directories": {},
  "_shasum": "65b8be9b2b5a833ac3e036d8ef79ec620c15f65c",
  "_resolved": "https://registry.npmjs.org/grunt-aws/-/grunt-aws-0.3.0.tgz"
}
